"use client";

import { SerializedAnswer } from "@/lib/atm/types";
import { LocalAnswer } from "./types";
import { useState } from "react";
import {
  Box,
  Callout,
  Card,
  Flex,
  IconButton,
  Link,
  Spinner,
  Text,
} from "@radix-ui/themes";
import {
  CaretDownIcon,
  CaretRightIcon,
  CrossCircledIcon,
  ExternalLinkIcon,
  InfoCircledIcon,
} from "@radix-ui/react-icons";
import Markdown from "react-markdown";
import {
  Annotation,
  AnnotationDelta,
} from "openai/resources/beta/threads/messages.mjs";

export function AnswerCard({
  answer,
}: {
  answer: SerializedAnswer | LocalAnswer;
}) {
  const [isExpandedByUser, setIsExpandedByUser] = useState<boolean>(true);
  const isLoading = "isLoading" in answer && answer.isLoading;
  const isExpanded = !(isLoading && !answer.content) && isExpandedByUser;
  const isError = !isLoading && !answer.completed && !answer.content;

  return (
    <Card>
      <Flex direction="column" gap="3">
        <Flex justify="between" align="center">
          <Flex align="center" gap="2">
            <IconButton
              variant="soft"
              color={isError ? "red" : undefined}
              onClick={() => setIsExpandedByUser((expanded) => !expanded)}
            >
              {isExpanded ? (
                <CaretDownIcon width={20} height={20} />
              ) : (
                <CaretRightIcon width={20} height={20} />
              )}
            </IconButton>
            <Text weight="bold">
              <Link href={answer.party.url || ""} target="_blank">
                {answer.party.name || answer.party.slug}{" "}
                <Box
                  display="inline-block"
                  asChild
                  style={{ verticalAlign: "middle" }}
                >
                  <ExternalLinkIcon />
                </Box>
              </Link>
            </Text>
          </Flex>
          {isLoading ? <Spinner /> : null}
        </Flex>
        {isExpanded ? (
          <>
            {answer.content ? (
              <>
                <Markdown>{removeContentAnnotations(answer)}</Markdown>

                {answer.party.manifestoUrl && !isLoading ? (
                  <Callout.Root color="gray" size="1">
                    <Callout.Icon>
                      <InfoCircledIcon />
                    </Callout.Icon>
                    <Callout.Text>
                      Generated by AI using{" "}
                      <Link href={answer.party.manifestoUrl}>
                        the {answer.party.name || answer.party.slug} party
                        manifesto{" "}
                        <Box
                          display="inline-block"
                          asChild
                          style={{ verticalAlign: "middle" }}
                        >
                          <ExternalLinkIcon width="12" />
                        </Box>
                      </Link>
                    </Callout.Text>
                  </Callout.Root>
                ) : null}
              </>
            ) : null}

            {isError ? (
              <Callout.Root variant="soft" color="red" size="1">
                <Callout.Icon>
                  <CrossCircledIcon />
                </Callout.Icon>
                <Callout.Text>
                  Unable to load answer, please retry asking the question.
                </Callout.Text>
              </Callout.Root>
            ) : null}
          </>
        ) : null}
      </Flex>
    </Card>
  );
}

function removeContentAnnotations({
  content,
  annotations,
}: {
  content: string;
  annotations: (Annotation | AnnotationDelta)[] | null;
}): string {
  const nodes = [];
  let cursorIndex = 0;

  for (const annotation of annotations || []) {
    const { start_index: startIndex, end_index: endIndex } = annotation;

    if (!startIndex || !endIndex) {
      continue;
    }

    nodes.push(content.slice(cursorIndex, startIndex).trim());
    cursorIndex = endIndex;
  }

  nodes.push(content.slice(cursorIndex, content.length).trim());

  return nodes.join("");
}
